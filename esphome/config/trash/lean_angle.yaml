esphome:
  name: esp32-lean-angle
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_passwd
  ap:
    ssid: "esp32_lean_angle_fallback"
    password: !secret ap_passwd

logger:
api:
captive_portal:
ota:

web_server:
  port: 80

# Enable the MPU6050 sensor
i2c:
  sda: 21
  scl: 22
  scan: True
  frequency: 400kHz

sensor:
  - platform: mpu6050
    address: 0x68
    update_interval: 500ms
    accel_x:
      name: "MPU6050 Accel X"
      id: ax
      filters:
         - sliding_window_moving_average:
            window_size: 5
            send_every: 1
         - delta: 0.5
    accel_y:
      name: "MPU6050 Accel Y"
      id: ay
      filters:
         - sliding_window_moving_average:
            window_size: 5
            send_every: 1
         - delta: 0.5
    accel_z:
      name: "MPU6050 Accel z"
      id: az
      filters:
         - sliding_window_moving_average:
            window_size: 5
            send_every: 1
         - delta: 0.5
    temperature:
      name: "MPU6050 Temperature"

  - platform: template
    name: "Roll"
    id: roll
    accuracy_decimals: 2
    state_class: measurement
    lambda: |-
      return  (atan( id(ay).state / sqrt( pow( id(ax).state , 2) + pow( id(az).state , 2) ) ) * 180 / PI) ;
    update_interval: 250ms

  - platform: template
    id: pitch
    name: "Pitch"
    accuracy_decimals: 2
    state_class: measurement
    lambda: |-
      return  (atan(-1 * id(ax).state / sqrt(pow(id(ay).state, 2) + pow(id(az).state, 2))) * 180 / PI);
    update_interval: 250ms

  - platform: template
    name: "Total Acceleration"
    id: total_acceleration
    accuracy_decimals: 2
    state_class: measurement
    device_class: speed
    unit_of_measurement: 'm/sÂ²'
    lambda: |-
      return sqrt(pow(id(ax).state, 2) + pow(id(ay).state, 2) + pow(id(az).state, 2));
    update_interval: 250ms

  - platform: template
    name: "G Force"
    id: g_force
    accuracy_decimals: 1
    state_class: measurement
    unit_of_measurement: 'g'
    lambda: |-
      return sqrt(pow(id(ax).state, 2) + pow(id(ay).state, 2) + pow(id(az).state, 2)) / 9.81;
    update_interval: 250ms

# Display the lean angle on the E-ink display
spi:
  clk_pin: 18
  mosi_pin: 23
  miso_pin: 19
  id: spi_bus

font:
  - file: 'fonts/unispace_bd.ttf'
    id: unispace
    size: 80

binary_sensor:
# Create a binary sensor to indicate if the IMU is connected
  - platform: status
    name: "Status"

  - platform: gpio
    name: "Button"
    id: epaper_sw1
    pin:
      number: GPIO39
      inverted: True

button:
  - platform: restart
    name: "Restart esp32-lean-angle"

display:
  - platform: waveshare_epaper
    cs_pin: 5
    dc_pin: 17
    busy_pin: 4
    reset_pin: 16
    model: 2.13in-ttgo-dke
    update_interval: 2s
    full_update_every: 280
    rotation: 270
    lambda: |-
      char buf[10];
      snprintf(buf, sizeof(buf), "%.2f", id(roll).state); // Convert float to string
      it.print(5, 10, id(unispace), buf); // Print the string on the display
